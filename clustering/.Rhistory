# empty vector to save results
n1<-c()
# number of clusters to consider
for (i in 1:30) {
cl<-clara(rgbImage1[, c("r.value", "g.value", "b.value")], i)
# saving silhouette to vector
n1[i]<-cl$silinfo$avg.width
}
plot(n1, type='l', main="Optimal number of clusters", xlab="Number of clusters", ylab="Average silhouette", col="blue")
points(n1, pch=21, bg="navyblue")
abline(h=(1:30)*5/100, lty=3, col="grey50")
# Silhouette information, for 7 clusters
clara<-clara(rgbImage1[,3:5], 2)
plot(silhouette(clara))
# assign medoids (“average” RGB values) to each cluster id and convert RGB into colour
colours<-rgb(clara$medoids[clara$clustering, ])
# plot pixels in the new colours
plot(y~x, data=rgbImage1, col=colours, pch=".", cex=2, asp=1, main="2 colours")
# reshape the dataframe into a matrix where each column represents a color channel
image_matrix <- matrix(c(rgbImage1$r.value, rgbImage1$g.value, rgbImage1$b.value), ncol=1, byrow=TRUE)
# convert the matrix into a 3-dimensional array
image_rgb <- array(image_matrix, dim=c(512, 512, 3))
# save the image to a JPEG file
writeJPEG(image_rgb, "asdasd.jpg")
plot(0:1,0:1,type="n",ann=FALSE,axes=FALSE)
rasterImage(image_rgb,0,0,1,1)
# how many original colours were on picture?
cols.org<-rgb(rgbImage1[,3:5])
head(cols.org)
length(unique(cols.org))
medoids <-function(x){
for (i in 1:k){
if(x==i) return(clara$medoids[i,])
}
}
# which cluster for each pixel(row)
dt_clust <- cbind(rgbImage1, clara$clustering)
k<-2 #number of clusters
medoids <-function(x){
for (i in 1:k){
if(x==i) return(clara$medoids[i,])
}
}
# apply above fuction
a<-t(apply(as.data.frame(dt_clust$`cl_dt$clustering`),1,medoits))
# apply above fuction
a<-t(apply(as.data.frame(dt_clust$`cl_dt$clustering`),1,medoids))
# apply above fuction
a<-t(apply(as.data.frame(dt_clust$`cl_dt$clustering`),1,medoids))
#change dimension from single columns to matrix
r<-a[,1]
g<-a[,2]
View(dt_clust)
# apply above fuction
a<-t(apply(as.data.frame(dt_clust$`clara$clustering`),1,medoids))
#change dimension from single columns to matrix
r<-a[,1]
g<-a[,2]
b<-a[,3]
dim(r) <- dim(img)[1:2]
dim(g) <- dim(img)[1:2]
dim(b) <- dim(img)[1:2]
dim(r) <- dim(rgbImage1)[1:2]
dim(g) <- dim(rgbImage1)[1:2]
dim(b) <- dim(rgbImage1)[1:2]
#change dimension from single columns to matrix
r<-a[,1]
g<-a[,2]
b<-a[,3]
rgb2 <- list(r,g,b)
# tranformation of data to jpeg package format
rgb2 <- sapply(rgb2, function(j) {compressed.img <- j}, simplify = 'array')
writeJPEG(rgb2, "aaaaaa.jpg")
dim(r) <- dim(landscape)[1:2]
dim(g) <- dim(landscape)[1:2]
dim(b) <- dim(landscape)[1:2]
rgb2 <- list(r,g,b)
# tranformation of data to jpeg package format
rgb2 <- sapply(rgb2, function(j) {compressed.img <- j}, simplify = 'array')
writeJPEG(rgb2, "aaaaaa.jpg")
clustering_to_jpeg(rgbImage1, clara, 2, 'asd')
clustering_to_jpeg <- function(image_matrix, cluster_object, k, file_name) {
# Determine the cluster for each pixel
cluster_df <- cbind(image_matrix, cluster_object$clustering)
# Function to swap number of cluster for its center
medoids <- function(x){
for (i in 1:k){
if(x==i) return(cluster_object$medoids[i,])
}
}
# Apply above function
a <- t(apply(as.data.frame(cluster_df$`cluster_object$clustering`), 1, medoids))
# Change dimension from single columns to matrix
img_list <- list(matrix(a[,1], nrow=dim(landscape)[1], ncol=dim(landscape)[2]),
matrix(a[,2], nrow=dim(landscape)[1], ncol=dim(landscape)[2]),
matrix(a[,3], nrow=dim(landscape)[1], ncol=dim(landscape)[2]))
# Transformation of data to jpeg package format
img_list <- sapply(img_list, function(j) {compressed.img <- j}, simplify = 'array')
# Save the image to a JPEG file
writeJPEG(img_list, file_name)
}
clustering_to_jpeg(rgbImage1, clara, 2, 'asd')
clustering_to_jpeg(rgbImage1, clara, 2, 'asd.jpg')
clara$i.med
clara$clusinfo
clara$sample
clara$call
clara$call[k]
clara$call[10]
clara$call[0]
clara$call[k]
clara$call[o]
clara$call[e]
clara$call['k']
clara$call['k']()
clara$call['k']
as.integer(clara$call['k'])
gc()
# libraries
library(jpeg)
library(rasterImage)
library(imager)
# upload an image
landscape<-readJPEG("landscape.jpg")
# plot the raster image
plot(1, type="n")
rasterImage(landscape, 0.6, 0.6, 1.4, 1.4)
# inspect the dimensions of the object - is it a 3d one?
dm1<-dim(landscape)
dm1
# develop a data frame
# get the coordinates of pixels - RGB info in three columns
image_df<-data.frame(x=rep(1:dm1[2], each=dm1[1]),  y=rep(dm1[1]:1, dm1[2]), r.value=as.vector(landscape[,,1]),  g.value=as.vector(landscape[,,2]), b.value=as.vector(landscape[,,3]))
head(image_df)
# more insight regarding the size of the dataset
dim(image_df)
# plot the image in RGB
plot(y~x, data=image_df, main="Desert beach landscape", col=rgb(image_df[c("r.value", "g.value", "b.value")]), asp=1, pch=".")
# apply CLARA and get Silhouette
library(cluster)
# empty vector to save results
n1<-c()
# number of clusters to consider
for (i in 1:30) {
cl<-clara(image_df[, c("r.value", "g.value", "b.value")], i)
# saving silhouette to vector
n1[i]<-cl$silinfo$avg.width
}
plot(n1, type='l', main="Optimal number of clusters", xlab="Number of clusters", ylab="Average silhouette", col="blue")
points(n1, pch=21, bg="navyblue")
abline(h=(1:30)*5/100, lty=3, col="grey50")
# Silhouette information, for 5 clusters
clara<-clara(image_df[,3:5], 5)
plot(silhouette(clara))
# assign medoids (“average” RGB values) to each cluster id and convert RGB into colour
colours<-rgb(clara$medoids[clara$clustering, ])
# plot pixels in the new colours
plot(y~x, data=image_df, col=colours, pch=".", cex=2, asp=1, main="2 colours")
# Function to export the clustered image to jpeg
clustering_to_jpeg <- function(image_matrix, cluster_object, k, file_name) {
# Determine the cluster for each pixel
cluster_df <- cbind(image_matrix, cluster_object$clustering)
# Function to swap number of cluster for its center
medoids <- function(x){
for (i in 1:k){
if(x==i) return(cluster_object$medoids[i,])
}
}
# Apply above function
a <- t(apply(as.data.frame(cluster_df$`cluster_object$clustering`), 1, medoids))
# Change dimension from single columns to matrix
img_list <- list(matrix(a[,1], nrow=dim(landscape)[1], ncol=dim(landscape)[2]),
matrix(a[,2], nrow=dim(landscape)[1], ncol=dim(landscape)[2]),
matrix(a[,3], nrow=dim(landscape)[1], ncol=dim(landscape)[2]))
# Transformation of data to jpeg package format
img_list <- sapply(img_list, function(x) {compressed.img <- x}, simplify = 'array')
# Save the image to a JPEG file
writeJPEG(img_list, file_name)
}
clustering_to_jpeg(image_df, clara, 2, 'asd.jpg')
clustering_to_jpeg(image_df, clara, 2, 'asd.jpg')
View(image_df)
View(clara)
clustering_to_jpeg(image_df, clara, 5, 'asd.jpg')
gc()
# libraries
library(jpeg)
library(rasterImage)
library(imager)
# upload an image
landscape<-readJPEG("landscape_raw.jpg")
# plot the raster image
plot(1, type="n")
rasterImage(landscape, 0.6, 0.6, 1.4, 1.4)
# inspect the dimensions of the object - is it a 3d one?
dm1<-dim(landscape)
dm1
# develop a data frame
# get the coordinates of pixels - RGB info in three columns
image_df<-data.frame(x=rep(1:dm1[2], each=dm1[1]),  y=rep(dm1[1]:1, dm1[2]), r.value=as.vector(landscape[,,1]),  g.value=as.vector(landscape[,,2]), b.value=as.vector(landscape[,,3]))
head(image_df)
# more insight regarding the size of the dataset
dim(image_df)
# plot the image in RGB
plot(y~x, data=image_df, main="Desert beach landscape", col=rgb(image_df[c("r.value", "g.value", "b.value")]), asp=1, pch=".")
# apply CLARA and get Silhouette
library(cluster)
# empty vector to save results
n1<-c()
# number of clusters to consider
for (i in 1:30) {
cl<-clara(image_df[, c("r.value", "g.value", "b.value")], i)
# saving silhouette to vector
n1[i]<-cl$silinfo$avg.width
}
plot(n1, type='l', main="Optimal number of clusters", xlab="Number of clusters", ylab="Average silhouette", col="blue")
points(n1, pch=21, bg="navyblue")
abline(h=(1:30)*5/100, lty=3, col="grey50")
# Silhouette information, for 5 clusters
clara<-clara(image_df[,3:5], 5)
plot(silhouette(clara))
# assign medoids (“average” RGB values) to each cluster id and convert RGB into colour
colours<-rgb(clara$medoids[clara$clustering, ])
# plot pixels in the new colours
plot(y~x, data=image_df, col=colours, pch=".", cex=2, asp=1, main="2 colours")
# Function to export the clustered image to jpeg
clustering_to_jpeg <- function(image_matrix, cluster_object, k, file_name) {
# Determine the cluster for each pixel
cluster_df <- cbind(image_matrix, cluster_object$clustering)
# Function to swap number of cluster for its center
medoids <- function(x){
for (i in 1:k){
if(x==i) return(cluster_object$medoids[i,])
}
}
# Apply above function
a <- t(apply(as.data.frame(cluster_df$`cluster_object$clustering`), 1, medoids))
# Change dimension from single columns to matrix
img_list <- list(matrix(a[,1], nrow=dim(landscape)[1], ncol=dim(landscape)[2]),
matrix(a[,2], nrow=dim(landscape)[1], ncol=dim(landscape)[2]),
matrix(a[,3], nrow=dim(landscape)[1], ncol=dim(landscape)[2]))
# Transformation of data to jpeg package format
img_list <- sapply(img_list, function(x) {compressed.img <- x}, simplify = 'array')
# Save the image to a JPEG file
writeJPEG(img_list, file_name)
}
clustering_to_jpeg(image_df, clara, 5, 'asd.jpg')
# how many original colours were on picture?
cols.org<-rgb(image_df[,3:5])
head(cols.org)
length(unique(cols.org))
# apply CLARA and get Silhouette
library(cluster)
# empty vector to save results
n1<-c()
# number of clusters to consider
for (i in 1:30) {
cl<-clara(image_df[, c("r.value", "g.value", "b.value")], i)
# saving silhouette to vector
n1[i]<-cl$silinfo$avg.width
}
plot(n1, type='l', main="Optimal number of clusters", xlab="Number of clusters", ylab="Average silhouette", col="blue")
points(n1, pch=21, bg="navyblue")
abline(h=(1:30)*5/100, lty=3, col="grey50")
# Silhouette information, for 2 clusters
clara<-clara(image_df[,3:5], 2)
plot(silhouette(clara))
# assign medoids (“average” RGB values) to each cluster id and convert RGB into colour
colours<-rgb(clara$medoids[clara$clustering, ])
# plot pixels in the new colours
plot(y~x, data=image_df, col=colours, pch=".", cex=2, asp=1, main="2 colours")
# Function to export the clustered image to jpeg
clustering_to_jpeg <- function(image_matrix, cluster_object, k, file_name) {
# Determine the cluster for each pixel
cluster_df <- cbind(image_matrix, cluster_object$clustering)
# Function to swap number of cluster for its center
medoids <- function(x){
for (i in 1:k){
if(x==i) return(cluster_object$medoids[i,])
}
}
# Apply above function
a <- t(apply(as.data.frame(cluster_df$`cluster_object$clustering`), 1, medoids))
# Change dimension from single columns to matrix
img_list <- list(matrix(a[,1], nrow=dim(landscape)[1], ncol=dim(landscape)[2]),
matrix(a[,2], nrow=dim(landscape)[1], ncol=dim(landscape)[2]),
matrix(a[,3], nrow=dim(landscape)[1], ncol=dim(landscape)[2]))
# Transformation of data to jpeg package format
img_list <- sapply(img_list, function(x) {compressed.img <- x}, simplify = 'array')
# Save the image to a JPEG file
writeJPEG(img_list, file_name)
}
clustering_to_jpeg(image_df, clara, 2, 'asd.jpg')
View(clustering_to_jpeg)
# the 2 cluster image has a very good
install.packages('knitr')
# how many original colours were on picture?
cols.org<-rgb(image_df[,3:5])
head(cols.org)
length(unique(cols.org))
# plot pixels in the new colours
plot(y~x, data=image_df, col=colours, pch=".", cex=2, asp=1, main="2 colours")
rasterImage(landscape, 0.6, 0.6, 1.4, 1.4)
# plot the raster image
plot(1, type="n")
rasterImage(landscape, 0.6, 0.6, 1.4, 1.4)
knitr::opts_chunk$set(echo = TRUE)
# libraries
library(jpeg)
library(rasterImage)
library(imager)
# read the image
landscape<-readJPEG("landscape.jpg")
# plot the raster image
plot(1, type="n")
rasterImage(landscape, 0.6, 0.6, 1.4, 1.4)
knitr::opts_chunk$set(echo = TRUE)
# libraries
library(jpeg)
library(rasterImage)
library(imager)
library(cluster)
# read the image
landscape<-readJPEG("landscape.jpg")
# plot the raster image
plot(1, type="n")
rasterImage(landscape, 0.6, 0.6, 1.4, 1.4)
plot(pressure)
rasterImage(landscape)
rasterImage(landscape, 0, 0, 1, 1)
# plot the raster image
plot(1, type="n")
rasterImage(landscape, 0, 0, 1, 1)
# plot the raster image
plot(0:1,0:1,type="n",ann=FALSE,axes=FALSE)
rasterImage(landscape,0,0,1,1)
knitr::opts_chunk$set(echo = TRUE)
# libraries
library(jpeg)
library(rasterImage)
library(imager)
library(cluster)
# read the image
landscape<-readJPEG("landscape.jpg")
# plot the raster image
plot(1, type="n")
rasterImage(landscape, 0.6, 0.6, 1.4, 1.4)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
# libraries
library(jpeg)
library(rasterImage)
library(imager)
library(cluster)
# read the image
landscape<-readJPEG("landscape.jpg")
# plot the raster image
plot(0:1,0:1,type="n",ann=FALSE,axes=FALSE)
rasterImage(landscape,0,0,1,1)
plot(pressure)
# libraries
library(jpeg)
library(rasterImage)
library(imager)
library(cluster)
# more insight regarding the size of the dataset
dim(image_df)
# inspect the dimensions of the object - is it a 3d one?
dm1<-dim(landscape)
dm1
# more insight regarding the size of the dataset
dim(image_df)
# develop a data frame
# get the coordinates of pixels - RGB info in three columns
image_df<-data.frame(x=rep(1:dm1[2], each=dm1[1]),  y=rep(dm1[1]:1, dm1[2]), r.value=as.vector(landscape[,,1]),  g.value=as.vector(landscape[,,2]), b.value=as.vector(landscape[,,3]))
head(image_df)
# more insight regarding the size of the dataset
dim(image_df)
# plot the image in RGB
plot(y~x, data=image_df, main="Desert beach landscape", col=rgb(image_df[c("r.value", "g.value", "b.value")]), asp=1, pch=".")
# develop a data frame
# get the coordinates of pixels - RGB info in three columns
image_df<-data.frame(x=rep(1:dm1[2], each=dm1[1]),  y=rep(dm1[1]:1, dm1[2]), r.value=as.vector(landscape[,,1]),  g.value=as.vector(landscape[,,2]), b.value=as.vector(landscape[,,3]))
head(image_df)
# plot the image in RGB
plot(y~x, data=image_df, main="Desert beach landscape", col=rgb(image_df[c("r.value", "g.value", "b.value")]), asp=1, pch=".")
# develop a data frame
# get the coordinates of pixels - RGB info in three columns
image_df<-data.frame(x=rep(1:dm1[2], each=dm1[1]),  y=rep(dm1[1]:1, dm1[2]), r.value=as.vector(landscape[,,1]),  g.value=as.vector(landscape[,,2]), b.value=as.vector(landscape[,,3]))
# plot the image in RGB
plot(y~x, data=image_df, main="Desert beach landscape", col=rgb(image_df[c("r.value", "g.value", "b.value")]), asp=1, pch=".")
knitr::opts_chunk$set(echo = TRUE)
# libraries
library(jpeg)
library(rasterImage)
library(imager)
library(cluster)
# read the image
landscape<-readJPEG("landscape.jpg")
# plot the raster image
plot(0:1,0:1,type="n",ann=FALSE,axes=FALSE)
rasterImage(landscape,0,0,1,1)
# dimensions of the object
dm1<-dim(landscape)
# develop a data frame
# get the coordinates of pixels - RGB info in three columns
image_df<-data.frame(x=rep(1:dm1[2], each=dm1[1]),  y=rep(dm1[1]:1, dm1[2]), r.value=as.vector(landscape[,,1]),  g.value=as.vector(landscape[,,2]), b.value=as.vector(landscape[,,3]))
# plot the image in RGB
plot(y~x, data=image_df, main="Desert beach landscape RGB", col=rgb(image_df[c("r.value", "g.value", "b.value")]), asp=1, pch=".")
# empty vector to save results
n1<-c()
# number of clusters to consider
for (i in 1:30) {
cl<-clara(image_df[, c("r.value", "g.value", "b.value")], i)
# saving silhouette to vector
n1[i]<-cl$silinfo$avg.width
}
plot(n1, type='l', main="Optimal number of clusters", xlab="Number of clusters", ylab="Average silhouette", col="blue")
points(n1, pch=21, bg="navyblue")
abline(h=(1:30)*5/100, lty=3, col="grey50")
# Function to export the clustered image to jpeg
clustering_to_jpeg <- function(image_matrix, cluster_object, k, file_name) {
# Determine the cluster for each pixel
cluster_df <- cbind(image_matrix, cluster_object$clustering)
# Function to swap number of cluster for its center
medoids <- function(x){
for (i in 1:k){
if(x==i) return(cluster_object$medoids[i,])
}
}
# Apply above function
a <- t(apply(as.data.frame(cluster_df$`cluster_object$clustering`), 1, medoids))
# Change dimension from single columns to matrix
img_list <- list(matrix(a[,1], nrow=dim(landscape)[1], ncol=dim(landscape)[2]),
matrix(a[,2], nrow=dim(landscape)[1], ncol=dim(landscape)[2]),
matrix(a[,3], nrow=dim(landscape)[1], ncol=dim(landscape)[2]))
# Transformation of data to jpeg package format
img_list <- sapply(img_list, function(x) {compressed.img <- x}, simplify = 'array')
# Save the image to a JPEG file
writeJPEG(img_list, file_name)
}
# Silhouette information, for 2 clusters
clara<-clara(image_df[,3:5], 2)
plot(silhouette(clara))
# assign medoids (“average” RGB values) to each cluster id and convert RGB into color
colours<-rgb(clara$medoids[clara$clustering, ])
# plot pixels in the new colors
plot(y~x, data=image_df, col=colours, pch=".", cex=2, asp=1, main="Landscape with 2 colors")
clustering_to_jpeg(image_df, clara, 2, 'two_cluster.jpg')
# Silhouette information, for 9 clusters
clara<-clara(image_df[,3:5], 9)
# assign medoids (“average” RGB values) to each cluster id and convert RGB into color
colours<-rgb(clara$medoids[clara$clustering, ])
# plot pixels in the new colors
plot(y~x, data=image_df, col=colours, pch=".", cex=2, asp=1, main="Landscape with 9 colors")
clustering_to_jpeg(image_df, clara, 9, 'nine_cluster.jpg')
# Silhouette information, for 17 clusters
clara<-clara(image_df[,3:5], 17)
# assign medoids (“average” RGB values) to each cluster id and convert RGB into color
colours<-rgb(clara$medoids[clara$clustering, ])
# plot pixels in the new colors
plot(y~x, data=image_df, col=colours, pch=".", cex=2, asp=1, main="Landscape with 17 colors")
clustering_to_jpeg(image_df, clara, 17, 'seventeen_cluster.jpg')
# Silhouette information, for 17 clusters
clara<-clara(image_df[,3:5], 17)
# assign medoids (“average” RGB values) to each cluster id and convert RGB into color
colours<-rgb(clara$medoids[clara$clustering, ])
# plot pixels in the new colors
plot(y~x, data=image_df, col=colours, pch=".", cex=2, asp=1, main="Landscape with 17 colors")
clustering_to_jpeg(image_df, clara, 17, 'seventeen_cluster.jpg')
# Silhouette information, for 24 clusters
clara<-clara(image_df[,3:5], 24)
# assign medoids (“average” RGB values) to each cluster id and convert RGB into color
colours<-rgb(clara$medoids[clara$clustering, ])
# plot pixels in the new colors
plot(y~x, data=image_df, col=colours, pch=".", cex=2, asp=1, main="Landscape with 24 colors")
clustering_to_jpeg(image_df, clara, 24, 'twentyfour_cluster.jpg')
# Silhouette information, for 50 clusters
clara<-clara(image_df[,3:5], 50)
# assign medoids ("average" RGB values) to each cluster id and convert RGB into color
colours<-rgb(clara$medoids[clara$clustering, ])
# plot pixels in the new colors
plot(y~x, data=image_df, col=colours, pch=".", cex=2, asp=1, main="Landscape with 50 colors")
clustering_to_jpeg(image_df, clara, 50, 'fifty_cluster.jpg')
# Silhouette information, for 100 clusters
clara<-clara(image_df[,3:5], 100)
# assign medoids ("average" RGB values) to each cluster id and convert RGB into color
colours<-rgb(clara$medoids[clara$clustering, ])
# plot pixels in the new colors
plot(y~x, data=image_df, col=colours, pch=".", cex=2, asp=1, main="Landscape with 100 colors")
clustering_to_jpeg(image_df, clara, 100, 'hundred_cluster.jpg')
# Silhouette information, for 200 clusters
clara<-clara(image_df[,3:5], 200)
# assign medoids ("average" RGB values) to each cluster id and convert RGB into color
colours<-rgb(clara$medoids[clara$clustering, ])
# plot pixels in the new colors
plot(y~x, data=image_df, col=colours, pch=".", cex=2, asp=1, main="Landscape with 200 colors")
clustering_to_jpeg(image_df, clara, 200, 'hundred_cluster.jpg')
# Silhouette information, for 300 clusters
clara<-clara(image_df[,3:5], 300)
# assign medoids ("average" RGB values) to each cluster id and convert RGB into color
colours<-rgb(clara$medoids[clara$clustering, ])
# plot pixels in the new colors
plot(y~x, data=image_df, col=colours, pch=".", cex=2, asp=1, main="Landscape with 300 colors")
clustering_to_jpeg(image_df, clara, 300, 'threehundred_cluster.jpg')
# Silhouette information, for 500 clusters
clara<-clara(image_df[,3:5], 500)
# assign medoids ("average" RGB values) to each cluster id and convert RGB into color
colours<-rgb(clara$medoids[clara$clustering, ])
# plot pixels in the new colors
plot(y~x, data=image_df, col=colours, pch=".", cex=2, asp=1, main="Landscape with 500 colors")
clustering_to_jpeg(image_df, clara, 500, 'fivehundred_cluster.jpg')
